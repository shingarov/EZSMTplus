BCemailToIlkaAlgo -- contains a letter to Ilkka that explains the algorithm
                     how the Circuit is built:

In order to run Cmodels with the BCpackage one should be at cmodelsSimplify 
directory where 

bcircuit 

program is.

cmodels -bc -keep -printCycle < program.lp.gr


1) Cmodels computes WFM (or its subset) and simplifies the program.
   All atoms, but one, which were found to be false are removed from the
program. One remaining false-atom is considered to be the head of all the
rules whose heads were removed at this step. Such rules are  constraints.

2) Cardinality and weight constraints  are eliminated using auxiliary atoms.
Choice rules with non-empty body are rewritten as nested rules.
(May be elimination of cardinality constraints is not needed  but for now
they are eliminated).

-  At this point Cmodels program has only 'basic' rules or choice rules
whose body is empty.

3) Cmodels builds a dependency graph of a program, where positive and
negative dependencies are taken into account. It marks the atoms that are
circular defined.

4) From such program Cmodels builds BC in the following way:
 For each atom a in the program
 a) if a occurs in some Choice rule, a is added as a gate to BC:
      a;
 b) if a is a false-atom and head of the rules a:-Body_1 ... A:-Body_n, we
    add the following lines into BC:
      a:= OR(AND(Body_1),...AND(Body_n));
      ASSIGN ~a;
 c) if a is not circular defined and a head of the rules a:-Body_1 ...
       a:-Body_n, we add the following line into BC:
       a:= OR(AND(Body_1),...AND(Body_n));
 d) if a is circular defined and a head of the rules a:-Body_1 ...
    a:-Body_n, we add the following lines into BC:
       gate_a:= a==OR(AND(Body_1),...AND(Body_n));
       ASSIGN gate_a;
 e) if atom a was found to be true in WFM, or is a member of
    compute_true{} then the following line is added to BC:
       ASSIGN a;
