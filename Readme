EZSMT+ is an constraint answer set programming solver extended from EZSMT. It takes a program written in EZCSP language as input, translates it into formulas written in SMT-LIB, and calls SMT solver to compute answer sets.


I. Installation
To compile EZSMT+ use the command lines:
1. % ./configure
2. % make

You need to have the following tools in order to run EZSMT+:
1. gringo(https://sourceforge.net/projects/potassco/files/gringo/4.5.3/). Place the executable file called gringo into the EZSMT+/tools folder.
2. SMT solvers:
  - CVC4(http://cvc4.cs.stanford.edu/downloads/builds/x86_64-linux-opt/cvc4-1.4-x86_64-linux-opt) Place the executable file into the EZSMT+/tools folder, and rename it as cvc4. Enter the command line: 
        % chmod +x cvc4
  - Z3(https://github.com/Z3Prover/z3/releases/tag/z3-4.5.0) Download the pre-compiled version z3-4.5.0-xxx, unzip and place the executable file bin/z3 into the folder EZSMT+/tools
  - YICES(http://yices.csl.sri.com/releases/2.5.4/yices-2.5.4-x86_64-pc-linux-gnu-static-gmp.tar.gz) Download the binaries and place the executable file yices/bin/yices-smt2 into the folder EZSMT+/tools
3. A pre-compiled version of EZCSP pre-parser comes with the distribution in the tools directory. If it does not work, download and compile binary files from www.mbal.tk/ezcsp/index.html. Replace the pre-compiled pre-parser with the resulting one.



Please append the following content to a file in your home directory called .bashrc:
   export EZSMTPLUS="<full-path-to-ezsmt+-directory>"
where <full-path-to-ezsmt+-directory> stands for the full path to the EZSMT+ directory. 
   e.g. export EZSMTPLUS="/home/da/ezsmtPlus"

Then, running the command
  % source ~/.bashrc
will set up the needed environment variables.



We have tested the following versions:
- gringo 4.5.4 and 3.0.5
- EZCSP 2.0.0
- cvc4 1.4
- z3 4.5.1
- yices 2.5.4



II. Usage

EZSMT+ is invoked as follows:
   % ./ezsmtPlus -file <path> [-file <path>] [-file <path>] <num1> <num2> [-cvc4|-yices|-z3] [-PrintExtAS] [-levelRanking|-levelRankingStrong|-SCClevelRanking|-SCClevelRankingStrong] [-reducedCompletion] [-minimalUpperBound] [-non-linear]


where:
<path> is the path to the input program in ezcsp language
<num1> is an optional number of answer sets to be computed. 0 stands for all and 1 is default.
<num2> is an optional number of extended answer sets to be computed. 0 stands for all and 1 is default.
[-cvc4|-yices|-z3] instructs EZSMT+ to call the corresponding SMT solver. By default, -cvc4 is chosen.
[-PrintExtAS] instructs EZSMT+ to print out extended answer sets. By default, only answer sets will be printed.
[-levelRanking|-levelRankingStrong|-SCClevelRanking|-SCClevelRankingStrong] selects the typy of level ranking formulas produced for non-tight programs. By default, -SCClevelRanking is chosen.
[-reducedCompletion] will instruct EZSMT+ to remove the part of Clark's completion that is captured by a level ranking formula.
[-minimalUpperBound] sets the upper bound of level ranking variables to the number of atoms inside the Strongly Connected Component containing that variable. A bigger upper bound (the total number of atoms) would be selected by default.
[-non-linear] selects non-linear logics for SMT solvers.


III. Example
Consider a non-tight EZ program ex1.ez:
   cspdomain(fd).
   cspvar(x).
   a :- c, not b.
   b :- d, not a.
   c :- d, not b.
   c :- d, not a.
   d :- c, not a.
   d :- not e, not b.
   e :- a, b.
   e :- not a, not b.
   required(x>=10) :- e.
   required(x<=9) :- not e.
Running the command
   % ./ezsmtPlus -file ex1.ez 0 -yices
gives us the output:
   ......
   Number of answer sets: 2
   Answer: 1
    Answer set: e
   Answer: 2
    Answer set: c d a

IV. Benchmarks
We also provide a collection of benchmarks in the folder called benchmarks.

Three benchmarks, namely, Reverse Folding, Incremental Scheduling, and Weighted Sequence, come from the Third Answer Set Programming Competition (Calimeri et al. 2011). We include a benchmark called Blending problem (Biavaschi 2017) and extend it to Blending_mixed, which contains variables over both integers and reals. Also, we use Bouncing Ball domain (Bartholomew 2016). It is important to remark that the encoding for BB domain results in a tight program. This domain uses nonlinear constraints over real numbers. In such a case ezsmt + is unable to handle nontight programs. Yet, it can process (non-)tight programs with integer nonlinear constraints (utilizing z3 or yices) or (non-)tight programs with linear constraints over real or mixed domain (using z3 or cvc4). Three more benchmarks, namely, RoutingMin, RoutingMax, and Travelling Salesperson are obtained from Liu, Janhunen, and Niemela (2012). The original TS benchmark is an optimization problem, and we turn it into a decision one. The Labyrinth benchmark is extended from the domain presented in the Fifth Answer Set Programming Competition (Calimeri et al. 2016). This extension allows us to add integer linear constraints into the problem encoding. Next benchmark, Robotics, comes from Young, Balduccini, and Israney (2017). Also, we present results on two benchmarks from Balduccini et al. (2017), namely, Car and Generator.

References:
[2011] Calimeri, F.; Ianni, G.; Ricca, F.; and et al. 2011.
The third answer set programming competition: Pre-
liminary report of the system competition track. In
Proceedings of the International Conference on Logic
Programming and Nonmonotonic Reasoning (LPNMR),
388–403. Berlin, Heidelberg: Springer-Verlag.
[2017] Biavaschi, S. 2017. Automated reasoning methods
in hybrid systems. Annual Report of “Scuola Superiore
dell’Università di Udine”.
[2016] Bartholomew, M. 2016. Answer Set Programming
Modulo Theories. Ph.D. Dissertation, Arizona State
University.
[2012] Liu, G.; Janhunen, T.; and Niemela, I. 2012. An-
swer set programming via mixed integer programming.
In Knowledge Representation and Reasoning Conference.
2016] Calimeri, F.; Gebser, M.; Maratea, M.; and Ricca,
F. 2016. Design and results of the fifth answer set
programming competition. Artif. Intell. 231(C):151–
181.
[2017] Young, R.; Balduccini, M.; and Israney, A. 2017.
Casp for robot control in hybrid domains. In In Work-
shop on Answer Set Programming and Other Computing
Paradigms (ASPOCP17).
[2017] Balduccini, M.; Magazzeni, D.; Maratea, M.; and
Leblanc, E. C. 2017. Casp solutions for planning in
hybrid domains. Theory and Practice of Logic Program-
ming 17(4):591–633.

V. Questions?
Send an e-mail to Da Shen(dashen@unomaha.edu), Yuliya Lierler(ylierler@unomaha.edu)
